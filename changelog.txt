05-06-2018:
	- Unificato i 4 form per la creazione di un Problema in uno solo
	- Aggiunto input mancanti al form (descrizione del problema, timeout ecc)
	- Sostituito il campo "ID Contest" nel form con una lista dei Contest disponibili (recuperata tramite chiamata ajax)
	- Creato un file javascript per la gestione\validazione del form
	- Creato un file css per il form
	- Creata funzione in ProblemController per catturare la chiamata ajax
	- Creata funzione in ContestDAO per invocare una query che restituisce i Contest disponibili dato un Professore
	- Adattato AddContestForm.java per il nuovo form
	- Spostati i form di creazione (Subject\Contest\Problem) in navbarTearcher, dato che lì risiedono i link (altrimenti in qualsiasi altra pagina diversa da HomeUser non si sarebbe potuto richiamare il form)
	
	TODO:
	- Cambiare in ProblemController contest.get() nella riga 98 con contest.getContestByName() (ora il form manda il nome e non l'id del contest)
	
07-06-2018
	- Migliorati i form per la creazione di un Contest e un Subject
	- Eliminato il campo "ID" nel form per la creazione del Subject (da autogenerare)
	- Aggiunti i campi mancanti nei form (a Contest mancano alcuni campi di cui non ho capito il significato nel DB)
	- Creata funzione in ContestController per catturare le chiamate ajax
	- Adattato AddSubjectForm.java per il nuovo form
	
	TODO:
	- Settare l'ID di Subject come generato (ora in HomeController nel metodo di creazione di un Subject l'ID viene settato dal campo del form ora rimosso)
	
	NOTA:
	- Per una delle due chiamate ajax ho dovuto, nel metodo in ContestController, eseguire la query e prendere i nomi prima di serializzarli con jackson, altrimenti veniva restituito LazyInitializationException. Decidere poi in back-end se usare un Fetch EAGER (ora è Lazy), la notazione @JsonIgnore sui campi che non devono essere serializzati, trovare un altro modo (Proxy?) o lasciare così finché non servirà l'oggetto completo (al momento serve solo un campo di quell'entità)
	https://vladmihalcea.com/the-best-way-to-handle-the-lazyinitializationexception/
	
09-06-2018
	- Bugfix
	- Create due JSP di supporto: header.jsp, che include file css comuni (Google Fonts, Bootstrap), e footer.jsp, che include javascript comuni (jQuery, Bootstrap)
	
15-06-2018
	- Ridisegnato il form per la sottomissione di soluzioni ai problemi
	- Aggiunto stile in contest.css
	- Creata servlet in ContestController per fornire il PDF (traccia) in download per ogni problema
	- Modificato contestMainView in ContestController, ora le Descrizioni seguono la formattazione iniziale per quanto riguarda il punto e a capo
	- Inserite le opzioni "cp" e "." al JavaProcessBuilder per l'esecuzione [Utili solo su Windows]
	
20-06-2018
	- Aggiunto campo hidden al form della submit di una soluzione (contest.jsp) eliminando il parametro problemID passato nell'URL
	
03-07-2018
	- Riscritta Vista "teamviews.jsp" in modo da rispettare lo stile generale del sito
	- Migliorato form per la creazione di un Team
	- Aggiunta validazione javascript sul form per la creazione di un Team
	- Ottimizzazione di codice ripetuto in tutte le Viste (spostato nelle navBar)
	- Eliminato campo "type" nel form per la Creazione di un Problema (inutile con la reflection)
	- Modificato "AddTeamForm" per rispecchiare il nuovo form
	- Modificata servlet "addTeam" in "TeamController" SOLO per rimuovere gli errori dati dalla modifica di "AddTeamForm"
	- Riscritta Vista "subjectview.jsp" in modo da rispettare lo stile generale del sito
	
04-07-2018
	- Fixato bug sulla Vista "contest.jsp" che impediva una corretta visualizzazione
	- Riaggiunto campo "type" nel form per la Creazione di un Problema

06-07-2018
	- Aggiunta la possibilità di rendere disponibili i TestCase agli studenti nella creazione di un Problema
	- Aggiunto supporto ai Tag nel form della creazione di un Problema
		- Utilizzata libreria bootstrap-tagsinput per i tag e typeaheadJS per il completamento automatico
		- Aggiornate le risorse (JS e CSS) della Vista "navbarTearcher"
		- Modificata "ProblemController" per fornire la lista dei Tag via chiamata AJAX
	- Fixato bug per cui non era possibile creare un Contest (la servlet sfruttava l'ID invece del nome, ora la chiamata AJAX restituisce anche l'ID)
		- Modificato "ContestController" (createContest)
		- Modificato "HomeController" (addContest)
	- Fixato bug per cui non era possibile creare una Subject (prima bisognava inserire l'ID manualmente, ora viene incrementato manualmente (NB: Controllo sulla Transazione)
		- Modificato "HomeController" (addSubject)
		- Modificati "SubjectDAO" e "SubjectDAOImpl" (creata "getLastID")
	- Aggiunto supporto back-end ai Tag e alla disponibilità dei TestCase agli studenti
		- Modificato "ProblemController" (addProblem)
		- Modificato "AbstractStrategy" (prepareToSave, per salvare il nuovo campo show_testcase)
		- Modificato "Problem" (aggiunto il campo show_testcase)
		- Modificato "AddProblemForm" (aggiunto il campo show_testcase e problemTags)
	- Fixato bug per la creazione di un Contest (settava male l'ID, la tabella hibernate_sequence deve avere un valore di partenza)
	- Aggiunto il salvataggio della data din un Contest
		- Modificato "HomeController" (addContest)
		- Modificato "AddContestForm" (aggiunta "deadline" ed eliminati campi year, month e day)
	
08-07-2018
	- Aggiunta la visualizzazione dei Tag più popolari durante la creazione di un Problema
		- Modificato TagDAO, TagDAOImpl, navbarTearcher
	- Creata Vista e Controller "myproblems" (url: /myProblems ) che mostra la lista dei Problemi CREATI dall'utente suddivisi per i rispettivi Contest
		- Modificato ProblemController, ContestDAO, ContestDAOImpl, ProblemDAO, ProblemDAOImpl
	- Adattata graficamente la Vista "myproblems", aggiunto button per modificare ed eliminare un Problema (da implementare in back-end)
		- Utilizzata libreria bootbox.js per il popup di alert e messaggi di conferme
		- Create le risorse (JS e CSS) per la Vista "myproblems"

09-07-2018
	- Aggiunta la possibilità di scaricare i TestCase nella pagina del problema, se questi sono stati abilitati dal Professore
		- Modificata "contest.jsp", "contest.css", "ContestController"
	- Aggiunta l'eliminazione di un Problema in back-end
		- Modificato "ProblemController", "Problem" (aggiunto le Submits per eliminazione in Cascade)
	- Aggiunta possibilità di modificare un Problema (front-end e chiamate Ajax back-end)
		- Modificato "ProblemController", "ProblemDAO", "ProblemDAOImpl", "Problem", "myproblems.jsp" (e script), "navbarTearcher.jsp"

10-07-2018
	- Fix modifica Problema
	- Aggiunta possibilità di clonare un Problema esistente in un altro Contest
		- Modificato "myproblems"
		- Modificato "ProblemController", ordinata la funzione e ottimizzato codice ripetuto
		- Modificato "myProblemsStyle" e "myProblemsScript"
		- Modificata "navbarTearcher" (valore di default per il timeout impostato a 5)
	- Fixato bug in "contest" per cui non si riusciva a visualizzare i problemi con più di uno spazio
		- Modificato "contest.js" (RegEx in .replace)

11-07-2018
	- Aggiunta possibiltà di vedere le Submit dei Problemi, divise per Team
		- Modicato "ProblemController"
		- Creata "viewProblemSubmits"
	- Aggiunta possibilità di vedere la singola Submit per un Problema, guardando il codice e con la possibilità di scaricarlo
		- Creata "viewSubmit"
		- Utilizzata libreria prismJS
	- Aggiunta possibilità di scaricare le proprie Submit (Student) dalla Home

13-07-2018
	- Creata Vista per il Team, consente al Prof di vedere le Sottomissioni di quel Team per i propri Problemi
		- Modificato "TeamController", "SubmitDAO", "SubmitDAOImpl", "TagDAOImpl"
		- Creata "viewTeam.jsp" (e CSS), modificato "teamviews.jsp", "viewProblemSubmit.jsp" e "viewSubmit.jsp"
	- Aggiunti Submit alla Vista "contest.jsp" dei Problemi
		- Modificato "ProblemController", "contest.jsp"
	- Creata Vista per creare un Quiz
		- Creata "createQuiz.jsp" (JS e CSS)
	
	
	
	
	